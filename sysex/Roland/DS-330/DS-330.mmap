# -------------------------------------------
# Memory Layout Roland/Boss DS-330
# -------------------------------------------

@Model Boss DS-330
@Packed

# -------------------------------------------
# Memory zones
# -------------------------------------------
@400000-000100 SystemParams Zone
{
	SystemParams
}

@400100-001000 CommonPatchParams Zone
{
	CommonPatchParams
}

@401000-002000 PatchParams Zone
{
	PatchParams[16 block]
}

@402000-002000 PatchSends Zone
{
	PatchSends[16 block]
}

@403000-000020 Information Zone
{
	String Information[32]
}

@410000-00000C Drum Map 1 Name
{
	String Name[12]
}
@411000-00000C Drum Map 2 Name
{
	String Name[12]
}

@410100 Drum Map 1
{
	DrumMapSetting
}

@411100 Drum Map 2
{
	DrumMapSetting
}

@480000-001D10 NIBBLES Bulk Dump
{
    BulkSystemParams
    BulkCommonPatchParams
    byte reserved[14]
    BulkPatchParams[16 block]
}
# ------------------------------------------------
# MAP 1
# ------------------------------------------------
@490000 NIBBLES Bulk DrumMap1 Key
{
	byte Key[128]
}
@490200 NIBBLES Bulk DrumMap1 Level
{
	byte Level[128]
}
@490400 NIBBLES Bulk DrumMap1 Group
{
	byte Group[128]
}
@490600 NIBBLES Bulk DrumMap1 Pan
{
	byte Pan[128]
}
@490800 NIBBLES Bulk DrumMap1 Reverb
{
	byte Reverb[128]
}
@490A00 NIBBLES Bulk DrumMap1 Chorus
{
	byte Chorus[128]
}
@490E00 NIBBLES Bulk DrumMap1 Name
{
	String Name[12]
}
# ------------------------------------------------
# MAP 2
# ------------------------------------------------

@491000 NIBBLES Bulk DrumMap2 Key
{
	byte Key[128]
}
@491200 NIBBLES Bulk DrumMap2 Level
{
	byte Level[128]
}
@491400 NIBBLES Bulk DrumMap2 Group
{
	byte Group[128]
}
@491600 NIBBLES Bulk DrumMap2 Pan
{
	byte Pan[128]
}
@491800 NIBBLES Bulk DrumMap2 Reverb
{
	byte Reverb[128]
}
@491A00 NIBBLES Bulk DrumMap2 Chorus
{
	byte Chorus[128]
}
@491E00 NIBBLES Bulk DrumMap2 Name
{
	String Name[12]
}
# -------------------------------------------
struct SystemParams
{
	int  Tune
	byte Level
	byte Pitch
	byte Pan
	byte reserved[120]
	Switch GS Init
}
struct 000100 CommonPatchParams
{
	String Name[16]
	10 Partials
	byte reserved[16]
	ReverbType Reverb Type
	byte Reverb Character
	byte Reverb Cutoff
	byte Reverb Level
	byte Reverb Time
	byte Reverb Delay
	byte Reverb To Chorus
	byte reserved[1]
	ChorusType Chorus Type
	byte Chorus Cutoff
	byte Chorus Level
	byte Chorus Feedback
	byte Chorus Delay
	byte Chorus Rate
	byte Chorus Depth
	byte Chorus To Reverb
}
# PatchParams comes in a specific order: block 1-16 where block 1 is the one for the drum, Channel = 10 for this one
# Patch Block 1 has channel 10
# Patch Block 2 has channel 2
# ...
# Channel field is in the range [0-15] so "channel" in the first block = 09

struct ToneParams
{
	byte Vibrato Rate
	byte Vibrato Depth
	byte TVF Cutoff
	byte TVF Resonance
	byte Attack
	byte Decay
	byte Release
	byte Vibrato Delay
}

struct 000100 PatchParams
{
	short Tone Command and Program Change
	byte Channel
	Switch Rx Pitch Bend
	Switch Rx Channel Aftertouch
	Switch Rx Prorgram Change
	Switch Rx Command Change
	Switch Rx Polyphonic Aftertouch
	Switch Rx Note Message
	Switch Rx RPN
	Switch Rx NRPN
	Switch Rx Modulation
	Switch Rx Volume
	Switch Rx Panning
	Switch Rx Expression
	Switch Rx Sustain
	Switch Rx Portamento
	Switch Rx Sostenuto
	Switch Rx Soft Pedal
	byte Mono Poly Mode
	byte Assignation Mode
	byte Drum Map
	byte Pitch Coarse
	short Pitch Fine
	byte Level
	byte Velocity
	byte Velocity Shift
	byte Panning
	byte Note range low
	byte Note range high
	byte CC1
	byte CC2
	byte Chorus Level
	byte Reverb Level
	byte reserved[13]

	ToneParams
	
	byte reserved[8]

	0C Fine Tune
}
struct 000100 PatchSends
{
    Send MOD
    Send BEND
    Send CAF
    Send PAF
    Send CC1
    Send CC2
}
struct Send
{
	byte Pitch Coarse
	byte TVF
	byte TVA
	LFOSend LFO1
	LFOSend LFO2
	byte reserved[5]
}
struct LFOSend
{
	byte Rate
	byte Pitch
	byte TVF
	byte TVA
}
struct DrumMapSetting
{
    byte Tune[128 Note]
	byte Level[128 Note]
	byte Group[128 Note]
	byte Pan[128 Note]
	byte Reverb[128 Note]
	byte Chorus[128 Note]
	Switch Rx NoteOn[128 Note]
	Switch Rx NoteOff[128 Note]
}
# -------------------------------------------
# Bulk types
# -------------------------------------------
struct BulkSystemParams
{
	short  Tune # 0400 mean 00040000, apparently it is NOT in NIBBLE but we don't handle this craziness
	byte   Level
	byte   unknown
	Switch GS Init
	byte   Pitch
	byte   Pan
	byte   unknown
}

struct BulkCommonPatchParams
{
	String Name[16]
	byte Partial[16 block]
	byte reserved[2]
	ReverbType Reverb Type
	byte Reverb Character
	byte Reverb Cutoff
	byte Reverb Level
	byte Reverb Time
	byte Reverb Delay
	byte Reverb To Chorus
	byte reserved
	ChorusType Chorus Type
	byte Chorus Cutoff
	byte Chorus Level
	byte Chorus Feedback
	byte Chorus Delay
	byte Chorus Rate
	byte Chorus Depth
	byte Chorus To Reverb
}
struct BulkToneParams
{
	byte Vibrato Rate
	byte Vibrato Depth
	byte TVF Cutoff
	byte TVF Resonance
	byte Attack
	byte Decay
	byte Release
	byte Vibrato Delay
}

struct BulkPatchParams
{
	short Tone Command and Program Change
	short Rx Mask
	byte Channel
	byte unknown1 # B0 for channel 10, 81 for the other
	byte Pitch Coarse
	byte Pitch Fine # 80 means 0800, apparently it is NOT in NIBBLE but we don't handle this craziness

	byte Level
	byte Velocity
	byte Velocity Shift
	byte Panning
	byte Note range low
	byte Note range high
	byte Chorus Level
	byte Reverb Level

	BulkToneParams

    byte unknown
    byte unknown

	0C Fine Tune

	byte CC1
	byte CC2
	
	BulkSend MOD
    BulkSend BEND
    BulkSend CAF
    BulkSend PAF
    BulkSend CC1
    BulkSend CC2
}

struct BulkSend
{
	byte Pitch
	byte TVF
	byte TVA
    byte reserved

    BulkLFOSend LFO1
    BulkLFOSend LFO2
}

struct BulkLFOSend
{
	byte Rate
	byte Pitch
	byte TVF
	byte TVA
}

# ------------------------------------------------------
# Enums
# ------------------------------------------------------
enum SplitMode
{
	Off
	Split
	Dual
}

enum Switch
{
	Off
	On
}

enum KeyboardMode
{
	MONO
	POLY
}

enum ReverbType
{
	Room 1
	Room 2
	Room 3
	Hall 1
	Hall 2
	Plate
	Delay
	Panning Delay
}

enum ChorusType
{
	Chorus 1
	Chorus 2
	Chorus 3
	Chorus 4
	Feedback Chorus
	Flanger
	byte Delay
	byte Delay Feedback
}
